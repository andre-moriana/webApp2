<?php
// Charger les variables d'environnement
if (file_exists('.env')) {
    $lines = file('.env', FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
    foreach ($lines as $line) {
        if (strpos($line, '=') !== false) {
            $parts = explode('=', $line, 2);
            if (count($parts) === 2) {
                $key = trim($parts[0]);
                $value = trim($parts[1]);
                if (!empty($key)) {
                    $_ENV[$key] = $value;
                }
            }
        }
    }
}
// Inclure ApiService
require_once __DIR__ . '/../Services/ApiService.php';

class GroupController {
    private $apiService;
    
    public function __construct() {
        $this->apiService = new ApiService();
    }
    
    public function index() {
        if (!isset($_SESSION['logged_in']) || $_SESSION['logged_in'] !== true) {
            header('Location: /login');
            exit;
        }
        
        $groups = [];
        $error = null;
        
        try {
            error_log("GroupController: Tentative de récupération des groupes");
            // Essayer de récupérer les groupes depuis l'API
            $response = $this->apiService->getGroups();
            error_log("GroupController: Réponse de l'API: " . print_r($response, true));
            
            if ($response['success']) {
                if (!empty($response['data']['groups'])) {
                    $groups = $response['data']['groups'];
                    error_log("GroupController: " . count($groups) . " groupes récupérés");
                } else {
                    error_log("GroupController: Aucun groupe dans la réponse");
                    $error = 'Aucun groupe disponible';
                }
            } else {
                error_log("GroupController: Erreur API - " . ($response['message'] ?? 'Erreur inconnue'));
                $error = $response['message'] ?? 'Erreur lors de la récupération des groupes';
            }
        } catch (Exception $e) {
            error_log("GroupController: Exception - " . $e->getMessage());
            $error = 'Erreur lors de la récupération des groupes';
        }
        
        $title = 'Gestion des groupes - Portail Archers de Gémenos';
        
        // DEBUG: Afficher les variables avant d'inclure la vue
        error_log("GroupController: Variables avant inclusion de la vue:");
        error_log("GroupController: groups = " . print_r($groups, true));
        error_log("GroupController: error = " . ($error ?? 'null'));
        
        include 'app/Views/layouts/header.php';
        include 'app/Views/groups/index.php';
        include 'app/Views/layouts/footer.php';
    }
    
    public function show($id) {
        if (!isset($_SESSION['logged_in']) || $_SESSION['logged_in'] !== true) {
            header('Location: /login');
            exit;
        }
        
        $group = null;
        $error = null;
        $chatMessages = [];
        $chatError = null;
        
        try {
            error_log("GroupController: Tentative de récupération des détails du groupe $id");
            // Récupérer le groupe depuis l'API
            $response = $this->apiService->getGroupDetails($id);
            error_log("GroupController: Réponse de l'API: " . print_r($response, true));
            
            if ($response['success']) {
                $group = $response['data'];
                error_log("GroupController: Détails du groupe récupérés avec succès");
                
                // Récupérer les messages du chat
                $chatResponse = $this->apiService->getGroupChat($id);
                error_log("GroupController: Réponse du chat: " . print_r($chatResponse, true));
                
                if ($chatResponse['success']) {
                    $chatMessages = $chatResponse['data'];
                    error_log("GroupController: Messages du chat récupérés avec succès");
                } else {
                    error_log("GroupController: Erreur chat - " . ($chatResponse['message'] ?? 'Erreur inconnue'));
                    $chatError = $chatResponse['message'] ?? 'Erreur lors de la récupération des messages';
                }
            } else {
                error_log("GroupController: Erreur - " . ($response['message'] ?? 'Erreur inconnue'));
                $error = $response['message'] ?? 'Erreur lors de la récupération du groupe';
            }
        } catch (Exception $e) {
            error_log("GroupController: Exception - " . $e->getMessage());
            $error = 'Erreur lors de la récupération du groupe';
        }
        
        $title = $group ? htmlspecialchars($group['name']) . ' - Portail Archers de Gémenos' : 'Groupe - Portail Archers de Gémenos';
        
        include 'app/Views/layouts/header.php';
        include 'app/Views/groups/show.php';
        include 'app/Views/layouts/footer.php';
    }
    
    public function create() {
        if (!isset($_SESSION['logged_in']) || $_SESSION['logged_in'] !== true) {
            header('Location: /login');
            exit;
        }
        
        $title = 'Créer un groupe - Portail Archers de Gémenos';
        
        include 'app/Views/layouts/header.php';
        include 'app/Views/groups/create.php';
        include 'app/Views/layouts/footer.php';
    }
    
    public function store() {
        if (!isset($_SESSION['logged_in']) || $_SESSION['logged_in'] !== true) {
            header('Location: /login');
            exit;
        }
        
        if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
            header('Location: /groups/create');
            exit;
        }
        
        $name = $_POST['name'] ?? '';
        $description = $_POST['description'] ?? '';
        $level = $_POST['level'] ?? 'débutant';
        
        if (empty($name)) {
            $_SESSION['error'] = 'Le nom du groupe est obligatoire';
            header('Location: /groups/create');
            exit;
        }
        
        try {
            // Ici vous pouvez ajouter la logique pour créer le groupe via l'API
            // Pour l'instant, on simule une création réussie
            
            $_SESSION['success'] = 'Groupe créé avec succès';
            header('Location: /groups');
            exit;
        } catch (Exception $e) {
            $_SESSION['error'] = 'Erreur lors de la création du groupe';
            header('Location: /groups/create');
            exit;
        }
    }
    
    public function edit($id) {
        if (!isset($_SESSION['logged_in']) || $_SESSION['logged_in'] !== true) {
            header('Location: /login');
            exit;
        }
        
        $group = null;
        $error = null;
        
        try {
            // Récupérer le groupe depuis l'API
            $response = $this->apiService->getGroups();
            if ($response['success'] && !empty($response['data']['groups'])) {
                foreach ($response['data']['groups'] as $g) {
                    if ($g['id'] == $id) {
                        $group = $g;
                        break;
                    }
                }
            }
            
            if (!$group) {
                $error = 'Groupe non trouvé';
            }
        } catch (Exception $e) {
            $error = 'Erreur lors de la récupération du groupe';
        }
        
        $title = 'Modifier le groupe - Portail Archers de Gémenos';
        
        include 'app/Views/layouts/header.php';
        include 'app/Views/groups/edit.php';
        include 'app/Views/layouts/footer.php';
    }
    
    public function update($id) {
        if (!isset($_SESSION['logged_in']) || $_SESSION['logged_in'] !== true) {
            header('Location: /login');
            exit;
        }
        
        if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
            header('Location: /groups/' . $id . '/edit');
            exit;
        }
        
        $name = $_POST['name'] ?? '';
        $description = $_POST['description'] ?? '';
        $level = $_POST['level'] ?? 'débutant';
        
        if (empty($name)) {
            $_SESSION['error'] = 'Le nom du groupe est obligatoire';
            header('Location: /groups/' . $id . '/edit');
            exit;
        }
        
        try {
            // Ici vous pouvez ajouter la logique pour mettre à jour le groupe via l'API
            // Pour l'instant, on simule une mise à jour réussie
            
            $_SESSION['success'] = 'Groupe mis à jour avec succès';
            header('Location: /groups/' . $id);
            exit;
        } catch (Exception $e) {
            $_SESSION['error'] = 'Erreur lors de la mise à jour du groupe';
            header('Location: /groups/' . $id . '/edit');
            exit;
        }
    }
    
    public function destroy($id) {
        if (!isset($_SESSION['logged_in']) || $_SESSION['logged_in'] !== true) {
            header('Location: /login');
            exit;
        }
        
        try {
            // Ici vous pouvez ajouter la logique pour supprimer le groupe via l'API
            // Pour l'instant, on simule une suppression réussie
            
            $_SESSION['success'] = 'Groupe supprimé avec succès';
            header('Location: /groups');
            exit;
        } catch (Exception $e) {
            $_SESSION['error'] = 'Erreur lors de la suppression du groupe';
            header('Location: /groups');
            exit;
        }
    }
    
    /**
     * Retourne des groupes simulés réalistes
     */
    private function getSimulatedGroups() {
        return [
            [
                'id' => 1,
                'name' => 'Débutants',
                'description' => 'Groupe pour les archers débutants',
                'level' => 'débutant',
                'memberCount' => 8,
                'createdAt' => '2024-01-01 10:00:00',
                'status' => 'active'
            ],
            [
                'id' => 2,
                'name' => 'Compétiteurs',
                'description' => 'Groupe pour les archers de compétition',
                'level' => 'avancé',
                'memberCount' => 12,
                'createdAt' => '2024-01-15 14:30:00',
                'status' => 'active'
            ],
            [
                'id' => 3,
                'name' => 'Loisir',
                'description' => 'Groupe pour la pratique du tir en loisir',
                'level' => 'intermédiaire',
                'memberCount' => 15,
                'createdAt' => '2024-02-01 09:15:00',
                'status' => 'active'
            ],
            [
                'id' => 4,
                'name' => 'Jeunes',
                'description' => 'Groupe pour les jeunes archers (moins de 18 ans)',
                'level' => 'débutant',
                'memberCount' => 6,
                'createdAt' => '2024-02-10 16:45:00',
                'status' => 'active'
            ]
        ];
    }
}
?>
